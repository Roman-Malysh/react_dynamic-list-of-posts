{"version":3,"sources":["utils/fetchClient.ts","utils/utils.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","components/DarkModeToggler/DarkModeToggle.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getUsers","a","getPosts","userId","getComments","postId","deleteComment","commentID","postComment","comment","PostsList","posts","setActivePost","setNewCommentField","activePost","openDetails","post","id","className","map","title","type","onClick","Loader","NewCommentForm","addComment","isAdding","useState","name","setName","email","setEmail","setComment","isErrorName","setIsErrorName","isErrorEmail","setIsErrorEmail","isErrorTextArea","setisErrorTextArea","emailPattern","match","addCommentt","event","preventDefault","overallPattern","trim","length","newComment","onSubmit","htmlFor","placeholder","classNames","value","onChange","e","target","PostDetails","newCommentField","comments","setComments","isLoading","setIsLoading","isError","setIsError","setisAdding","prev","handleDeleteComment","commentId","filteredComments","filter","useEffect","fetchData","commentsFromServer","href","UserSelector","users","setSelectedUserId","selectUser","PostAnulation","isSelectorActive","setSelector","activeUser","setActiveUser","userName","setUserName","onBlur","role","user","onMouseDown","selectHandle","DarkModeToggle","setDarkModeIsOn","darkModeIsOn","App","setUsers","setPosts","selectedUserId","awaitLoadPosts","usersFromServer","useCallback","loadPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.59d8b78b.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from './fetchClient';\n\nexport const getUsers = async () => {\n  const response = await client.get<User[]>('/users');\n\n  return response;\n};\n\nexport const getPosts = async (userId: number) => {\n  const response = await client.get<Post[]>(`/posts?userId=${userId}`);\n\n  return response;\n};\n\nexport const getComments = async (postId: number) => {\n  const response = await client.get<Comment[]>(`/comments?postId=${postId}`);\n\n  return response;\n};\n\nexport const deleteComment = async (commentID: number) => {\n  const response = await client.delete(`/comments/${commentID}`);\n\n  return response;\n};\n\nexport const postComment = async (comment :Comment) => {\n  const response = await client.post<Comment>('/comments', comment);\n\n  return response;\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  setActivePost: (post: Post | null) => void;\n  setNewCommentField: (boolean: boolean) => void;\n  activePost: Post | null;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  setActivePost,\n  setNewCommentField,\n  activePost,\n}) => {\n  const openDetails = (post: Post) => {\n    if (activePost?.id === post.id) {\n      setNewCommentField(false);\n      setActivePost(null);\n      setActivePost(null);\n    } else {\n      setActivePost(post);\n      setActivePost(post);\n      setNewCommentField(false);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">{post.title}</td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {activePost?.id === post.id ? (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link\"\n                    onClick={() => {\n                      openDetails(post);\n                    }}\n                  >\n                    Close\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => {\n                      openDetails(post);\n                    }}\n                  >\n                    Open\n                  </button>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  activePost: Post,\n  addComment: (comment: Comment) => void,\n  isAdding: boolean,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  activePost,\n  addComment,\n  isAdding,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [isErrorName, setIsErrorName] = useState(false);\n  const [isErrorEmail, setIsErrorEmail] = useState(false);\n  const [isErrorTextArea, setisErrorTextArea] = useState(false);\n\n  const emailPattern = email.match(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i);\n\n  const addCommentt = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const overallPattern\n      = name.trim().length && emailPattern && comment.trim().length;\n\n    if (!name.length) {\n      setIsErrorName(true);\n    }\n\n    if (!emailPattern) {\n      setIsErrorEmail(true);\n    }\n\n    if (!comment.length) {\n      setisErrorTextArea(true);\n    }\n\n    if (overallPattern) {\n      const newComment: Comment = {\n        id: 0,\n        postId: activePost.id,\n        name,\n        email,\n        body: comment,\n      };\n\n      addComment(newComment);\n      setComment('');\n    }\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={addCommentt}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': isErrorName })}\n            value={name}\n            onChange={(e) => {\n              setName(e.target.value);\n              setIsErrorName(false);\n            }}\n          />\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          {isErrorName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {isErrorName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': isErrorEmail })}\n            value={email}\n            onChange={(e) => {\n              setEmail(e.target.value);\n              setIsErrorEmail(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isErrorEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isErrorEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': isErrorTextArea })}\n            value={comment}\n            onChange={(e) => {\n              setComment(e.target.value);\n              setisErrorTextArea(false);\n            }}\n          />\n        </div>\n        {isErrorTextArea && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', { 'is-loading': isAdding })}\n          >\n            Add\n          </button>\n        </div>\n        <div className=\"control\">\n          <button\n            type=\"button\"\n            className=\"button is-link is-light\"\n            onClick={() => setComment('')}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { getComments, deleteComment, postComment } from '../utils/utils';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  activePost: Post;\n  newCommentField: boolean;\n  setNewCommentField: (boolean: boolean) => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  activePost,\n  newCommentField,\n  setNewCommentField,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isAdding, setisAdding] = useState(false);\n\n  const addComment = async (comment: Comment) => {\n    setisAdding(true);\n    await postComment(comment);\n    setComments((prev) => [...prev, comment]);\n    setisAdding(false);\n  };\n\n  const handleDeleteComment = async (commentId: number) => {\n    await deleteComment(commentId);\n\n    const filteredComments = comments.filter(\n      (comment) => comment.id !== commentId,\n    );\n\n    setComments(filteredComments);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      const commentsFromServer = await getComments(activePost.id);\n\n      try {\n        setComments(commentsFromServer);\n      } catch {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [activePost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${activePost.id}: ${activePost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">{activePost.body}</p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <>\n              {isError && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              )}\n\n              {comments.length > 0 ? (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  Comments:\n                </p>\n              ) : (\n                <p className=\"title is-4\">No comments yet</p>\n              )}\n\n              {comments.map((comment) => (\n                <article className=\"message is-small\" data-cy=\"Comment\">\n                  <div className=\"message-header\">\n                    <a href=\"mailto:misha@mate.academy\" data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n              {!newCommentField ? (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setNewCommentField(true)}\n                >\n                  Write a comment\n                </button>\n              ) : (\n                <NewCommentForm\n                  activePost={activePost}\n                  addComment={addComment}\n                  isAdding={isAdding}\n                />\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  users: User[];\n  setSelectedUserId: (userId: number) => void;\n  selectUser: (user: User) => void;\n  PostAnulation: (post: Post | null) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  setSelectedUserId,\n  selectUser,\n  PostAnulation,\n}) => {\n  const [isSelectorActive, setSelector] = useState(false);\n  const [activeUser, setActiveUser] = useState<User | null>(null);\n  const [userName, setUserName] = useState('Choose a user');\n\n  const selectHandle = (user: User) => {\n    setActiveUser(user);\n    PostAnulation(null);\n    setUserName(user.name);\n    setSelector(false);\n    setSelectedUserId(user.id);\n    selectUser(user);\n  };\n\n  return (\n    <div data-cy=\"UserSelector\" className=\"dropdown is-active\">\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setSelector(true)}\n          onBlur={() => setSelector(false)}\n        >\n          <span>{userName}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isSelectorActive && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map((user) => (\n              <a\n                href={`#user-${user.id}`}\n                className={classNames('dropdown-item', {\n                  'is-active': activeUser?.id === user.id,\n                })}\n                key={user.id}\n                onMouseDown={() => {\n                  selectHandle(user);\n                }}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport './DarkModeToggler.scss';\n\ntype Props = {\n  setDarkModeIsOn: (isOn: boolean) => void,\n  darkModeIsOn: boolean,\n};\n\nexport const DarkModeToggle: React.FC<Props> = ({\n  setDarkModeIsOn,\n  darkModeIsOn,\n}) => {\n  return (\n    <input\n      id=\"toggle\"\n      className=\"toggle\"\n      type=\"checkbox\"\n      onChange={() => setDarkModeIsOn(!darkModeIsOn)}\n    />\n  );\n};\n","import { useEffect, useState, useCallback } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { User } from './types/User';\nimport { getUsers, getPosts } from './utils/utils';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { Post } from './types/Post';\nimport { DarkModeToggle } from './components/DarkModeToggler/DarkModeToggle';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  const [activePost, setActivePost] = useState<Post | null>(null);\n  const [newCommentField, setNewCommentField] = useState(false);\n  const [darkModeIsOn, setDarkModeIsOn] = useState<boolean>(false);\n\n  const PostAnulation = () => {\n    setActivePost(null);\n  };\n\n  const errorNotification = () => {\n    setIsError(true);\n    setTimeout(() => {\n      setIsError(false);\n    }, 3000);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const usersFromServer = await getUsers();\n\n      try {\n        setIsLoading(true);\n        setUsers(usersFromServer);\n      } catch {\n        errorNotification();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  async function loadPosts(userId: number) {\n    setPosts([]);\n    setIsLoading(true);\n    try {\n      const awaitLoadPosts = await getPosts(userId);\n\n      setPosts(awaitLoadPosts);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const selectUser = useCallback((user: User) => {\n    setSelectedUserId(user.id);\n    loadPosts(user.id);\n  }, []);\n\n  return (\n    <main className={classNames('section', { darkModeIsOn })}>\n      <DarkModeToggle\n        setDarkModeIsOn={setDarkModeIsOn}\n        darkModeIsOn={darkModeIsOn}\n      />\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  setSelectedUserId={setSelectedUserId}\n                  selectUser={selectUser}\n                  PostAnulation={PostAnulation}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n                {isLoading && (\n                  <Loader />\n                )}\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n                {selectedUserId && posts.length === 0 && !isLoading && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n                {posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    setActivePost={setActivePost}\n                    setNewCommentField={setNewCommentField}\n                    activePost={activePost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': activePost },\n            )}\n          >\n            {activePost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  activePost={activePost}\n                  setNewCommentField={setNewCommentField}\n                  newCommentField={newCommentField}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}